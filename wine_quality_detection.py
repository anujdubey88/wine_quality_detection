# -*- coding: utf-8 -*-
"""wine_quality_detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-R5N6Op26t_aem8O0oCOsnFq7G_ULYjK

##Importing dependencies :
*   Numpy
*   Pandas
*   Matplotlib
*   Seaborn
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""#Importing requared dependencies of sklearn library :"""

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

"""##Importing dataset and train_test_split from sklearn"""

wine_quality_dataset=pd.read_csv(r"winequality-red.csv")
print(wine_quality_dataset)

"""##Data Inspection"""

wine_quality_dataset.shape

wine_quality_dataset.info()

wine_quality_dataset.describe()

"""##Data cleaning"""

# Checking Null values
wine_quality_dataset.isnull().sum()
# There are no NULL values in the dataset, hence it is clean.

"""## Data Analysis And Visualization"""

sns.catplot(x='quality',data=wine_quality_dataset,kind='count')

# volatile acidity vs Quality
plot = plt.figure(figsize=(5,5))
sns.barplot(x='quality', y = 'volatile acidity', data = wine_quality_dataset)

# citric acid vs Quality
plot = plt.figure(figsize=(5,5))
sns.barplot(x='quality', y = 'citric acid', data = wine_quality_dataset)

"""##Correlation

1.   Positive Correlation
2.   Negative Correlation


"""

correlation = wine_quality_dataset.corr()

# constructing a heatmap to understand the correlation between the columns
plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt = '.1f', annot = True, annot_kws={'size':8}, cmap = 'Blues')

"""##Data Preprocessing"""

# separate the data and Label
X = wine_quality_dataset.drop('quality',axis=1)

print(X)

"""##Label Binarizaton"""

Y = wine_quality_dataset['quality'].apply(lambda y_value: 1 if y_value>=7 else 0)

print(Y)

"""##Train Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=3)

print(Y.shape, Y_train.shape, Y_test.shape)

"""#Model Training:

Using Random Forest Classifier
"""

model = RandomForestClassifier()

model.fit(X_train, Y_train)

"""###Model Evaluation And Accuracy Score"""

# accuracy on test data
ypre = model.predict(X_test)
test_data_accuracy = accuracy_score(ypre, Y_test)

print('Accuracy : ', test_data_accuracy)